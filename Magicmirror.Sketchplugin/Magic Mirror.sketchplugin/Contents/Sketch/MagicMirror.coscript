@import "helper.js"
@import "LayerHelper.cocoascript"
@import "BezierPathHelper.cocoascript"
@import "ImageHelper.cocoascript"

var MagicMirror = function(context) {

    var ctx = MagicMirror.context(context)
    var util = MagicMirror.util
    var ui = MagicMirror.ui
    var createFlattener = MagicMirror.flattener

    return {
        context : ctx,

        jumpToArtboard : function() {
            var context = this.context
            var run = function(selections, view, artboards, ui, util) {
                log("MagicMirror.jumpToArtboard()")
                if (util.empty(selections)) {
                    ui.alert("Magic Mirror", "No layer selected. Please select a shape layer in order to perform the Jump To Artboard action.")
                }

                var selection = selections[0] || {}
                var lookup = util.createLookup(artboards)
                var artboard = lookup[selection.name]
                if (artboard) {
                    view.zoomToArtboard(artboard)
                }
            }

            run(context.selections() || [], context.view, context.artboards(), ui, util)
        },

        mirrorPage : function() {
            var context = this.context
            var run = function(artboards, layers, util, flattener) {
                log("MagicMirror.mirrorPage()")
                var lookup = util.createLookup(artboards)
                for (layer of layers) {
                    var parent = layer.artboard
                    var artboard = lookup[layer.name]
                    if (layer.mirrorable && artboard) {
                        flattener.perspectiveTransform(artboard, layer)
                    }
                }
            }
            run(context.artboards(), context.layers(), util, createFlattener())
        },

        rotatePoints : function(context) {
            var context = this.context
            var run = function(artboards, selections, ui, util, flattener) {
                log("MagicMirror.rotatePoints()")

                if (util.empty(selections)) {
                    ui.alert("Magic Mirror", "No shape layers selected. Please select a shape layer to continue the Rotate Points operation.")
                    return
                }

                var lookup = util.createLookup(artboards)
                for (selection of selections) {
                    if (selection.pointsRotatable) {
                        selection.rotatePoints()
                        var artboard = lookup[selection.name] 
                        if (selection.mirrorable && artboard) {
                            flattener.perspectiveTransform(artboard, selection)
                        }
                    } else {
                        util.debug("selection: " + selection.name + " not rotatable")
                    }
                }
            }

            run(context.artboards(), context.selections(), ui, util, createFlattener())
        },

        highlightMirrors: function(context) {
            var context = this.context
            var run = function(artboards, layers, util, flattener) {
                log("MagicMirror.highlightMirrors()")
                var lookup = util.createLookup(artboards)
                for (layer of layers) {
                    var parent = layer.artboard
                    var artboard = lookup[layer.name]
                    if (layer.mirrorable && artboard) {
                        layer.fillColor("#CCCCCC")
                    }
                }
            }
            run(context.artboards(), context.layers(), util, createFlattener())
        }
    }
}

MagicMirror.context = function(context) {

    var pri = (function(context){
        var doc = context.document;           // the current document (MSDocument)
        var page = [doc currentPage];         // the current page (MSPage)
        var artboards = [page artboards];     // all artboards
        var view = [doc currentView];
        var selections = context.selection

        return {
            doc: doc,
            page : page,
            artboards : artboards,
            view : view,
            selections : selections,
        }
    }(context));

    var view = MagicMirror.view(pri.view)
    var artboards = function() {
        return map(pri.artboards, function(artboard) {
            return MagicMirror.artboard(artboard)
        })
    }
    var selections = function() {
        var selections = map(pri.selections, function(item) {
            return MagicMirror.layer(item)
        })
        return selections 
    }
    var layers = function() {
        return map([page children], function(layer) {
            return MagicMirror.layer(layer)
        })
    }
    var page = pri.page

    var context = {}
    context.page = page
    context.view = view
    context.artboards = artboards
    context.selections = selections
    context.layers = layers
    return context
}

MagicMirror.artboard = function(msartboard) {
    if (!msartboard) {
        return {}
    }
    return {
        name: msartboard.name(),
        rect: [msartboard rect],
        layer : msartboard,
    }
}

MagicMirror.layer = function(mslayer) {
    if (mslayer.className && mslayer.className().toString() == "MSShapeGroup") {
        var artboard = MagicMirror.artboard(mslayer.parentArtboard())
        var layerName = mslayer.name()
        return {
            artboard: artboard,
            name: layerName,
            mirrorable: true || (artboard.name != layerName),
            pointsRotatable: true,
            rotatePoints:function() {
                var bezierPath = LayerHelper.getBezierPath(mslayer)
                var rotated = BezierPathHelper.rotatePoints(bezierPath)
                mslayer.setBezierPath(rotated)
                log("rotate: " + this.name)
            },
            fillColor: function(hex) {
                LayerHelper.fillColor(mslayer, hex)
            },
            layer : mslayer,
        }
    } else {
        //var artboard = MagicMirror.artboard(mslayer.parentArtboard())
        return {
            //artboard: artboard,
            name: mslayer.name(),
            mirrorable: false,
            pointsRotatable: false
        }
    }
}

MagicMirror.flattener = function() {
    return {
        flattener : MSLayerFlattener.alloc().init(),
        perspectiveTransform : function(from, to) {
            var layer = to.layer
            var image = LayerHelper.getImage(from.layer, this.flattener)
            var bezierPath = LayerHelper.getBezierPathInBounds(layer)
            var quad = BezierPathHelper.getQuad(bezierPath)
            var resized = ImageHelper.resizeImage(image, layer.boundsRect().size)   // For unknown reason, resizing before doing transform seemed to fix missing thumbnail issue when first applying Magic Mirror
            var transformed = ImageHelper.perspectiveTransform(resized, quad.tl, quad.tr, quad.bl, quad.br)
            LayerHelper.fillBottom(layer, transformed)
            log("perspectiveTransforming: from " + from.name + ", to: " + to.name)
        }
    }
}

MagicMirror.view = function(view) {
    return {
        view: view,
        zoomToArtboard:function(artboard) {
            log("jump to artboard for layer: " + artboard.name + ", frame: " + artboard.frame + ", view:" + this.view)
            this.view.zoomToFitRect(NSInsetRect(artboard.rect, -50, -50));
        }
    }
}

MagicMirror.util = {
    empty : function(array) {
        return (array == nil || array.length == 0)
    },
    createLookup : function(identifiables) {
        var lookup = {}
        for (item of identifiables) {
            lookup[item.name] = item
        }
        return lookup
    },
    debug : function(text) {
        log(text)
    }
}

MagicMirror.ui = {
    alert : function(title, message) {
        var app = [NSApplication sharedApplication];
	    [app displayDialog:message withTitle:title];
    }
}
